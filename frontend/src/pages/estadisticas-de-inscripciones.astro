---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
---

<Layout title="UCACUE - Estado de Inscripciones" description="Página protegida para revisar inscripciones.">
  <Navbar title="UCACUE" links={[{ name: "Inscripción", href: "/inscripcion" }, { name: "Revisión", href: "/revision" }]} />
  <main class="container-custom py-10">
    <h1 class="text-3xl font-bold mb-6">Estadísticas de Inscripciones</h1>

    <!-- Filtro superior -->
    <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-3 mb-6">
      <div>
        <label class="label" for="filtro-carrera">Filtrar por carrera</label>
        <select id="filtro-carrera" class="input w-72 max-w-full">
          <option value="">Todas</option>
        </select>
      </div>
      <div class="flex gap-2">
        <button id="btn-volver" type="button" class="btn-secondary hidden">Volver</button>
        <a href="/inscripcion" class="btn-secondary">Nueva inscripción</a>
        <button id="logout" class="btn-secondary" type="button">Cerrar sesión</button>
      </div>
    </div>

    <!-- Vista 1: Tarjetas con conteo por carrera -->
    <section id="vista-resumen" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></section>

    <!-- Vista 2: Tabla de detalle por carrera -->
    <section id="vista-detalle" class="hidden">
      <div class="overflow-auto">
        <table class="min-w-full border border-gray-200 rounded-lg overflow-hidden">
          <thead class="bg-gray-100">
            <tr>
              <th class="text-left p-2">Nombres completos</th>
              <th class="text-left p-2">Cédula</th>
              <th class="text-left p-2">Correo electrónico</th>
              <th class="text-left p-2">Tipo de colegio</th>
              <th class="text-left p-2">Costo matrícula</th>
            </tr>
          </thead>
          <tbody id="tbody-detalle"></tbody>
        </table>
      </div>
    </section>

    <!-- Gráficos -->
    <section id="charts" class="mt-10 hidden">
      <h2 class="text-2xl font-semibold mb-4">Visualizaciones</h2>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white border rounded-lg p-4 shadow-sm">
          <h3 class="font-medium mb-2">Porcentaje de inscripciones por carrera</h3>
          <canvas id="donutChart" height="240"></canvas>
        </div>
        <div class="bg-white border rounded-lg p-4 shadow-sm">
          <h3 class="font-medium mb-2">Total de inscripciones por carrera</h3>
          <canvas id="barChart" height="240"></canvas>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  const AUTH_KEY = 'is_admin';
  function isAuthed() { try { return localStorage.getItem(AUTH_KEY) === 'true'; } catch (e) { return false; } }
  function requireAuth() { if (!isAuthed()) { window.location.href = '/revision'; } }
  requireAuth();

    const filtroCarrera = document.getElementById('filtro-carrera');
  const vistaResumen = document.getElementById('vista-resumen');
  const vistaDetalle = document.getElementById('vista-detalle');
  const tbodyDetalle = document.getElementById('tbody-detalle');
  const btnVolver = document.getElementById('btn-volver');
  const logoutBtn = document.getElementById('logout');

  const BASE_VALUE = 100;

  // Cargar Chart.js desde CDN cuando sea necesario
  function ensureChartJs() {
    return new Promise((resolve, reject) => {
      if (window.Chart) return resolve(window.Chart);
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js';
      s.async = true;
      s.onload = () => resolve(window.Chart);
      s.onerror = () => reject(new Error('No se pudo cargar Chart.js'));
      document.head.appendChild(s);
    });
  }

  let donutInstance = null;
  let barInstance = null;

  function getTipoColegioFromText(colegioText) {
    const t = String(colegioText || '').toLowerCase();
    if (t.includes('fiscal') || t.includes('fiscomisional') || t.includes('fiscomisional')) return 'Fiscal/Fiscomisional';
    return 'Particular';
  }
  function calcularCostoPorColegio(colegioText) {
    const tipo = getTipoColegioFromText(colegioText);
    const descuento = tipo === 'Particular' ? 0 : BASE_VALUE * 0.03;
    return Number((BASE_VALUE - descuento).toFixed(2));
  }

  function cargarCarrerasEnFiltro(carreras) {
    filtroCarrera.innerHTML = '<option value="">Todas</option>' + carreras.map(c => `<option value="${c}">${c}</option>`).join('');
  }

  function buildResumenPorCarrera(registros) {
    const grupos = {};
    for (const r of registros) {
      // r.carrera puede ser objeto { id, nombre, numeroEstudiante }
      const nombreCarrera = r?.carrera?.nombre || r?.carrera || 'Sin carrera';
      grupos[nombreCarrera] = (grupos[nombreCarrera] || 0) + 1;
    }
    return grupos;
  }

  async function fetchInscripciones() {
    try {
      const res = await fetch('http://localhost:8080/inscripciones');
      if (!res.ok) throw new Error('HTTP ' + res.status);
      const data = await res.json();
      return Array.isArray(data) ? data : [];
    } catch (e) {
      console.error('No se pudieron cargar las inscripciones', e);
      return [];
    }
  }

  function buildDataForCharts(registros) {
    const resumen = buildResumenPorCarrera(registros);
    const carreras = Object.keys(resumen).sort((a,b) => resumen[b]-resumen[a]);
    return { carreras, counts: carreras.map(c => resumen[c]) };
  }

  async function renderResumen() {
    const registros = await fetchInscripciones();
    const resumen = buildResumenPorCarrera(registros);
    // ordenar por conteo desc
    const carreras = Object.keys(resumen).sort((a,b) => resumen[b]-resumen[a]);
    cargarCarrerasEnFiltro(carreras);

    vistaDetalle.classList.add('hidden');
    btnVolver.classList.add('hidden');
    vistaResumen.innerHTML = '';

    for (const carrera of carreras) {
      const count = resumen[carrera];
      const card = document.createElement('button');
      card.type = 'button';
      card.className = 'text-left p-4 bg-white border rounded-lg shadow-sm hover:shadow-md transition flex items-center justify-between';
      card.innerHTML = `<div><div class="text-sm text-gray-500">Carrera</div><div class="text-lg font-semibold">${carrera}</div></div><div class="text-3xl font-bold text-primary-600">${count}</div>`;
      card.addEventListener('click', () => mostrarDetalle(carrera));
      vistaResumen.appendChild(card);
    }

    // Renderizar gráficos debajo del resumen
    const { carreras: labels, counts } = buildDataForCharts(registros);
    if (labels.length) {
      try {
        await ensureChartJs();
        renderCharts(labels, counts);
      } catch (e) {
        console.warn('No se mostrarán gráficos:', e?.message || e);
        document.getElementById('charts')?.classList.add('hidden');
      }
    } else {
      document.getElementById('charts')?.classList.add('hidden');
    }
  }

  function renderCharts(labels, counts) {
    const chartSection = document.getElementById('charts');
    if (!labels?.length || !counts?.length) {
      chartSection?.classList.add('hidden');
      return;
    }
    chartSection?.classList.remove('hidden');

    const colors = labels.map((_, i) => {
      const base = [
        '#3b82f6','#22c55e','#f59e0b','#ef4444','#8b5cf6',
        '#06b6d4','#d946ef','#84cc16','#f97316','#0ea5e9'
      ];
      return base[i % base.length];
    });

    const donutCtx = document.getElementById('donutChart').getContext('2d');
    const barCtx = document.getElementById('barChart').getContext('2d');

    if (donutInstance) donutInstance.destroy();
    if (barInstance) barInstance.destroy();

    donutInstance = new Chart(donutCtx, {
      type: 'doughnut',
      data: { labels, datasets: [{ data: counts, backgroundColor: colors, borderWidth: 1 }] },
      options: {
        plugins: {
          legend: { position: 'bottom' },
          tooltip: {
            callbacks: {
              label: (ctx) => {
                const total = counts.reduce((a,b) => a+b, 0) || 1;
                const val = ctx.parsed;
                const pct = (val * 100) / total;
                return `${ctx.label}: ${val} (${pct.toFixed(1)}%)`;
              }
            }
          }
        }
      }
    });

    barInstance = new Chart(barCtx, {
      type: 'bar',
      data: {
        labels,
        datasets: [{ label: 'Inscritos', data: counts, backgroundColor: colors.map(c => c + 'cc'), borderColor: colors, borderWidth: 1 }]
      },
      options: {
        plugins: { legend: { display: false } },
        scales: { y: { beginAtZero: true, ticks: { stepSize: 1 }, precision: 0 } }
      }
    });
  }

  async function mostrarDetalle(carreraSeleccionada) {
    const registros = await fetchInscripciones();
    const filtrados = registros.filter(r => (r?.carrera?.nombre || r?.carrera || '') === carreraSeleccionada);

    tbodyDetalle.innerHTML = '';
    for (const r of filtrados) {
      const costo = Number(r?.costo ?? calcularCostoPorColegio(r?.colegio?.tipo || ''));
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td class="p-2 border-t">${r.nombre || ''}</td>
        <td class="p-2 border-t">${r.cedula || ''}</td>
        <td class="p-2 border-t">${r.email || ''}</td>
        <td class="p-2 border-t">${r?.colegio?.tipo || ''}</td>
        <td class="p-2 border-t">$${Number(costo).toFixed(2)}</td>
      `;
      tbodyDetalle.appendChild(tr);
    }

    // Ocultar gráficos al ver detalle
    document.getElementById('charts')?.classList.add('hidden');

    vistaResumen.classList.add('hidden');
    vistaDetalle.classList.remove('hidden');
    btnVolver.classList.remove('hidden');

    // preseleccionar en el filtro
    filtroCarrera.value = carreraSeleccionada;
  }

  // Eventos
  filtroCarrera?.addEventListener('change', async (e) => {
    const val = e.target.value;
    if (!val) {
      // volver al resumen
      vistaDetalle.classList.add('hidden');
      btnVolver.classList.add('hidden');
      vistaResumen.classList.remove('hidden');
      await renderResumen();
    } else {
      await mostrarDetalle(val);
    }
  });

  btnVolver?.addEventListener('click', async () => {
    filtroCarrera.value = '';
    vistaDetalle.classList.add('hidden');
    btnVolver.classList.add('hidden');
    vistaResumen.classList.remove('hidden');
    // Volver a cargar gráficos
    try {
      const registros = await fetchInscripciones();
      const { carreras: labels, counts } = buildDataForCharts(registros);
      if (labels.length) {
        await ensureChartJs();
        renderCharts(labels, counts);
      } else {
        document.getElementById('charts')?.classList.add('hidden');
      }
    } catch (e) {
      document.getElementById('charts')?.classList.add('hidden');
    }
  });

  logoutBtn?.addEventListener('click', () => {
    try { localStorage.removeItem(AUTH_KEY); } catch (e) {}
    window.location.href = '/revision';
  });

  // Init
  renderResumen();
</script>
